{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","classes","dialogsItems","active","src","alt","to","id","name","Message","message","text","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","DialogObj","MessagesPage","DialogsData","map","key","MesObj","MessagesData","React","createRef","dialogs","messages","formData","AddMess","newMessageText","Composed","compose","connect","state","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCenKC,EAXI,SAACC,GAChB,OAEI,yBAAKC,UAAS,UAAKC,IAAQC,aAAb,YAA6BD,IAAQE,SAC/C,yBAAKC,IAAI,oFAAoFC,IAAI,KACjG,kBAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,IAC5BR,EAAMS,QCMRC,EAbC,SAACV,GACb,OACI,6BAEI,yBAAKC,UAAWC,IAAQS,SACnBX,EAAMY,Q,kCCyDnBC,EAAYC,YAAiB,IA0B3BC,EAAsBC,YAAU,CAACC,KAAM,cAAjBD,EAxBL,SAAChB,GACpB,OAAQ,6BACA,6BAGI,0BAAMkB,SAAUlB,EAAMmB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAM,iBAAkBc,YAAa,kCAAmCC,SAAU,CAACC,IAAUZ,KACzH,6BACI,kDAKZ,kCAeGa,EAtFC,SAAC1B,GAGb,IAAI2B,EAAY3B,EAAM4B,aAAaC,YAAYC,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAAYtB,KAAMsB,EAAItB,KAAMD,GAAIuB,EAAIvB,QAC5FwB,EAAShC,EAAM4B,aAAaK,aAAaH,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,CAASnB,KAAMmB,EAAInB,UAGxDsB,IAAMC,YA6B3B,OAEI,yBAAKlC,UAAWC,IAAQkC,SAEpB,yBAAKnC,UAAWC,IAAQC,cACnBwB,GAGL,yBAAK1B,UAAWC,IAAQmC,UACpB,6BAAML,GAEN,kBAACjB,EAAD,CAAqBG,SAlBb,SAACoB,GACjBtC,EAAMuC,QAAQD,EAASE,sB,uBCqB3BC,EAAWC,YACXC,aA7BoB,SAACC,GACrB,MAAO,CACHhB,aAAcgB,EAAMhB,iBAID,SAACiB,GACxB,MAAO,CACHN,QAAS,SAACC,GACNK,EAASC,YAAwBN,SAqBzCO,IAFWL,CAGbhB,GAGae","file":"static/js/3.08fdab4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1-j0T\",\"dialogsItems\":\"Dialogs_dialogsItems__2MVrn\",\"active\":\"Dialogs_active__3dh1b\",\"messages\":\"Dialogs_messages__2mr1G\",\"message\":\"Dialogs_message__1thvn\"};","import classes from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        \r\n        <div className={`${classes.dialogsItems} ${classes.active}`}>\r\n            <img src=\"https://icons.iconarchive.com/icons/diversity-avatars/avatars/256/batman-icon.png\" alt=\"\"/>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\nexport default DialogItem","import classes from '../Dialogs.module.css'\r\nimport React from \"react\";\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div className={classes.message}>\r\n                {props.text}\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default Message","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utilites/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    /// key={key.id} ???\r\n    let DialogObj = props.MessagesPage.DialogsData.map((key) => <DialogItem name={key.name} id={key.id}/>);\r\n    let MesObj = props.MessagesPage.MessagesData.map((key) => <Message text={key.text}/>);\r\n\r\n    ////\r\n    let newMessElement = React.createRef();\r\n\r\n    // let onAddMess = () => {\r\n    //     // let text = newPostElement.current.value;\r\n    //     // props.dispatch(addMessageActionCreator());\r\n    //     // props.addPost()\r\n    //     props.AddMess()\r\n    //     // props.updateNewPostText('')\r\n    // };\r\n\r\n\r\n    // let onMessChange = () => {\r\n    //\r\n    //     let text = newMessElement.current.value;\r\n    //     // props.dispatch(onMessageChangeActionCreator(text))\r\n    //     props.onMessChange(text)\r\n    //\r\n    //     // props.updateNewPostText(text)\r\n    // };\r\n\r\n\r\n    //набранный текст хранится в стейте redux-form\r\n    let addNewMessage = (formData) => {\r\n        props.AddMess(formData.newMessageText)\r\n    }\r\n\r\n    // if (!props.isAuth) {return <Redirect to={'/login'}/>}\r\n\r\n\r\n    return (\r\n\r\n        <div className={classes.dialogs}>\r\n\r\n            <div className={classes.dialogsItems}>\r\n                {DialogObj}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{MesObj}</div>\r\n\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nlet maxLength = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (<div>\r\n            <div>\r\n\r\n                {/*<textarea onChange={onMessChange} ref={newMessElement} value={props.MessagesPage.newMessageText}/>*/}\r\n                <form onSubmit={props.handleSubmit}>\r\n                    <Field component={Textarea} name={'newMessageText'} placeholder={'Default message from redux-form'} validate={[required, maxLength]}/>\r\n                    <div>\r\n                        <button>Add Message</button>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n            <div>\r\n                {/*<button onClick={onAddMess}>Add Message</button>*/}\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'addMessage'})(AddMessageForm)\r\n\r\n\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {onMessageChangeActionCreator, addMessageActionCreator } from \"../Redux/message-reducer\"\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../Hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// const DialogsContainer = () => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//\r\n//             let AddMessCont = () => {\r\n//                 store.dispatch(addMessageActionCreator());\r\n//             };\r\n//\r\n//\r\n//             let onMessChangeCont = (text) => {\r\n//                 let action = onMessageChangeActionCreator(text);\r\n//                 store.dispatch(action)\r\n//             };\r\n//\r\n//             return <Dialogs AddMess={AddMessCont}\r\n//                             onMessChange={onMessChangeCont}\r\n//                             MessagesPage={store.getState().MessagesPage}/>\r\n//\r\n//         }\r\n//         }\r\n//     </StoreContext.Consumer>\r\n//\r\n// };\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        MessagesPage: state.MessagesPage,\r\n\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        AddMess: (newMessageText) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        },\r\n        // onMessChange: (text) => {\r\n        //     dispatch(onMessageChangeActionCreator(text))\r\n        // }\r\n    }\r\n};\r\n//перенесенов hoc\r\n// let AuthRedirectContainerComponent = (props) => {\r\n//     if (!props.isAuth) {return <Redirect to={'/login'}/>}\r\n//     return <Dialogs {...props}/>\r\n// };\r\n\r\n\r\n//start -- перенесенов compose\r\n// let AuthRedirectContainerComponentWithState = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectContainerComponentWithState)\r\n//end\r\n\r\nlet Composed = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n//export default DialogsContainer\r\nexport default Composed\r\n"],"sourceRoot":""}